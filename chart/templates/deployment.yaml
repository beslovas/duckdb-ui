apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "duckdb.fullname" . }}
  labels:
    {{- include "duckdb.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "duckdb.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "duckdb.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "duckdb.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.initContainers }}
      initContainers:
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: duckdb
              containerPort: 4213
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "curl -f http://localhost:4213/version || exit 1"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "curl -f http://localhost:4213/version || exit 1"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "curl -f http://localhost:4213/version || exit 1"
            initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold }}
            successThreshold: {{ .Values.startupProbe.successThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.path }}
            - name: config
              mountPath: /root/.duckdbrc
              subPath: duckdbrc
            {{- if .Values.persistence.enabled }}
            - name: data
              mountPath: /root/.duckdb
              subPath: duckdb-config
            {{- end }}
          env:
            - name: DUCKDB_DATABASE_PATH
              value: "{{ .Values.persistence.path }}/{{ .Values.duckdb.databaseFile }}"
            {{- if .Values.duckdb.extensions }}
            - name: DUCKDB_EXTENSIONS
              value: "{{ join "," .Values.duckdb.extensions }}"
            {{- end }}
            {{- if .Values.duckdb.config.memory_limit }}
            - name: DUCKDB_MEMORY_LIMIT
              value: "{{ .Values.duckdb.config.memory_limit }}"
            {{- end }}
            {{- if .Values.duckdb.config.threads }}
            - name: DUCKDB_THREADS
              value: "{{ .Values.duckdb.config.threads }}"
            {{- end }}
            {{- if .Values.auth.enabled }}
            - name: AUTH_ENABLED
              value: "true"
            - name: AUTH_USERNAME
              value: {{ .Values.auth.username | quote }}
            - name: AUTH_PASSWORD
              value: {{ .Values.auth.password | quote }}
            {{- end }}
            {{- if .Values.env }}
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}

      {{- if .Values.sidecars }}
      {{- toYaml .Values.sidecars | nindent 8 }}
      {{- end }}
      volumes:
        - name: data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "duckdb.fullname" . }}
          {{- else }}
          emptyDir: {}
          {{- end }}
        - name: config
          configMap:
            name: {{ include "duckdb.fullname" . }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
